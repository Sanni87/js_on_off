/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/common.module.js":
/*!******************************!*\
  !*** ./src/common.module.js ***!
  \******************************/
/*! namespace exports */
/*! export getNameAndNamespace [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getRealEventList [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRealEventList": () => /* binding */ getRealEventList,
/* harmony export */   "getNameAndNamespace": () => /* binding */ getNameAndNamespace
/* harmony export */ });
const getRealEventList = function (parentElement) {
    let result = null;

    //In this case we assign the event to the elements itselfs
    if (parentElement === document || parentElement instanceof Element) {
        result = [parentElement];
    }
    else if (parentElement instanceof HTMLCollection || parentElement instanceof NodeList) {
        result = parentElement;
    }

    return result;
};

const getNameAndNamespace = function (nameWithNamespace) {
    const outcome = [];
    if (nameWithNamespace) {
        const splitted = nameWithNamespace.split('.');
        if (splitted){

            for (let index = 0; index < splitted.length; index++) {
                outcome.push(splitted[index]);
            }
        }
    }
    return outcome;
};



/***/ }),

/***/ "./src/off.module.js":
/*!***************************!*\
  !*** ./src/off.module.js ***!
  \***************************/
/*! namespace exports */
/*! export off [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "off": () => /* binding */ off
/* harmony export */ });
/* harmony import */ var _common_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.module */ "./src/common.module.js");
;

const off = function (events, selector, handler) {

    let elementList,
    realSelector,
    eventsSplitted,
    realHandler;

    if (selector && typeof selector === "function"){
        realHandler = selector;
    }
    else if (selector && (typeof selector === 'string' || selector instanceof String) && !handler){
        realSelector = selector;
    }
    else if (selector && handler) {
        realSelector = selector;
        realHandler = handler;
    }

    if (events) {
        eventsSplitted = events.split(' ');
    }

    elementList = (0,_common_module__WEBPACK_IMPORTED_MODULE_0__.getRealEventList)(this);

    for (let elementIndex = 0; elementIndex < elementList.length; elementIndex++) {
        const currentElement = elementList[elementIndex];

        if (eventsSplitted && eventsSplitted.length > 0){

            for (let eventIndex = 0; eventIndex < eventsSplitted.length; eventIndex++) {
                const currentEvent = eventsSplitted[eventIndex];

                let currentEventName, namespace;
                [currentEventName, namespace] = (0,_common_module__WEBPACK_IMPORTED_MODULE_0__.getNameAndNamespace)(currentEvent);

                if (currentEventName) {

                    if (realHandler){
                        removeListener(currentElement, namespace, currentEventName, realHandler, realSelector);
                    }
                    else {
                        removeAllListeners(currentElement, namespace, currentEventName, realSelector);
                    }
                } else if (namespace) { // in this case we don't have eventName but we have namespace

                    for (const currentEvent in currentElement.ev) {
                        removeAllListeners(currentElement, namespace, currentEvent, realSelector);
                    }
                }
            }
        } 
        else {
            for (const currentEvent in currentElement.ev) {
                removeAllListeners(currentElement, undefined, currentEvent, realSelector);
            }
        }
    }
};

const removeAllListeners = function (currentElement, namespace, currentEvent, realSelector) {
    let handlerList = getHandlerList(currentElement, namespace, currentEvent, realSelector);
    if (handlerList) {
        for (let handlerIndex = 0; handlerIndex < handlerList.length; handlerIndex++) {
            const currentHandler = handlerList[handlerIndex];
            removeListener(currentElement, namespace, currentEvent, currentHandler, realSelector);
        }
    }

    // if there is no namespace, we must to remove also namespaced eventhandlers
    if (!namespace && currentElement.ev && currentElement.ev[currentEvent] && currentElement.ev[currentEvent].nel) {
        for (const currentNamespace in currentElement.ev[currentEvent].nel) {
            removeAllListeners(currentElement, currentNamespace, currentEvent, realSelector);
        }
    }

    // if there is no delegate selector, we must to remove also delegated eventhandlers
    if (!realSelector && currentElement.ev && currentElement.ev[currentEvent] && currentElement.ev[currentEvent].del) {
        for (const currentRealSelector in currentElement.ev[currentEvent].del) {
            removeAllListeners(currentElement, namespace, currentEvent, currentRealSelector);
        }
    }
}

const removeListener = function (element, namespace, currentEvent, handler, delegateSelector) {
    let realEventStructure = getRealEventStructure(element, namespace, currentEvent);

    if (realEventStructure && handler) {
        if (!delegateSelector){
            if (element.ev && realEventStructure && realEventStructure.el)
            realEventStructure.el = realEventStructure.el.filter(el => el != handler);
            element.removeEventListener(currentEvent, handler);
        } else {
            const delegateHandler = getDelegateHandler(realEventStructure, handler, delegateSelector);
            if (delegateHandler){
                realEventStructure.del[delegateSelector] = realEventStructure.del[delegateSelector].filter(el => el != delegateHandler);
                element.removeEventListener(currentEvent, delegateHandler);
            }
        }
    }
}

const getDelegateHandler = function (realEventStructure, handler, delegateSelector) {
    let outcome = null;

    if (realEventStructure && delegateSelector) {
        if (realEventStructure.del[delegateSelector]){
            outcome = realEventStructure.del[delegateSelector].find( dh => dh.realHandler === handler);
        }
    }

    return outcome;
};

const getHandlerList = function (element, namespace, currentEvent, delegateSelector) {
    let outcome = null;

    let realEventStructure = getRealEventStructure(element, namespace, currentEvent);

    if (realEventStructure) {
        if (delegateSelector && realEventStructure.del[delegateSelector]){
            outcome = realEventStructure.del[delegateSelector].map( cdel => cdel.realHandler );
        }
        else {
            outcome = realEventStructure.el;
        }
    }
    
    return outcome;
};

const getRealEventStructure = function (element, namespace, currentEvent) {
    let outcome;
    if (element && element.ev && currentEvent && element.ev[currentEvent]) {

        if (namespace && element.ev[currentEvent].nel[namespace]) {
            outcome = element.ev[currentEvent].nel[namespace];
        } else if (!namespace){
            outcome = element.ev[currentEvent];
        }
    }

    return outcome;
}



/***/ }),

/***/ "./src/on.module.js":
/*!**************************!*\
  !*** ./src/on.module.js ***!
  \**************************/
/*! namespace exports */
/*! export on [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "on": () => /* binding */ on
/* harmony export */ });
/* harmony import */ var _common_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.module */ "./src/common.module.js");
;

const on = function (events, selector, data, handler) {

    //if event is null or empty, don't run anything
    if (events) {
        let elementList,
        realSelector,
        realData,
        realHandler,
        eventsSplitted;

        if (selector && !data && !handler) {
            realHandler = selector;
        }
        else if (selector && data && !handler) {
            realSelector = selector;
            realHandler = data;
        }
        else if (selector && data && handler) {
            realSelector = selector;
            realData = data;
            realHandler = handler;
        }

        eventsSplitted = events.split(' ');

        elementList = (0,_common_module__WEBPACK_IMPORTED_MODULE_0__.getRealEventList)(this);

        for (let elementIndex = 0; elementIndex < elementList.length; elementIndex++) {
            const currentElement = elementList[elementIndex];
    
            //Create the dictionary to next off the events properly
            if (!currentElement.ev){
                currentElement.ev = {};
            }
    
            if (eventsSplitted) {
                for (let eventIndex = 0; eventIndex < eventsSplitted.length; eventIndex++) {
                    const currentEvent = eventsSplitted[eventIndex];
    
                    let currentEventName, namespace;
                    [currentEventName, namespace] = (0,_common_module__WEBPACK_IMPORTED_MODULE_0__.getNameAndNamespace)(currentEvent);
                    if (!currentElement.ev[currentEventName]) {
                        currentElement.ev[currentEventName] = createEmptyEventStructure(true);
                    }
    
                    addListener(currentElement, namespace, currentEventName, realHandler, realSelector);
                }
            }
        }
    }
};

const addListener = function (element, namespace, currentEvent, handler, delegateSelector) {
    if (element && currentEvent && handler) {

        let realEventStructure;
        if (namespace) {
            if (!element.ev[currentEvent].nel[namespace]) {
                element.ev[currentEvent].nel[namespace] = createEmptyEventStructure();
            }
            realEventStructure = element.ev[currentEvent].nel[namespace];
        } else {
            realEventStructure = element.ev[currentEvent];
        }

        if (!delegateSelector){
            realEventStructure.el.push(handler);
            element.addEventListener(currentEvent, handler);
        } else {
            const delegateHandler = createDelegateHandler(handler, delegateSelector);
            if (!realEventStructure.del[delegateSelector]){
                realEventStructure.del[delegateSelector] = [];
            }
            realEventStructure.del[delegateSelector].push(delegateHandler);
            element.addEventListener(currentEvent, delegateHandler, false);
        }
    }
};

const createDelegateHandler = function (handler, delegateSelector) {
    let outcome = null;

    if (handler && delegateSelector){
        outcome = function(e) {
            // loop parent nodes from the target to the delegation node
            for (let target = e.target; target && target != this; target = target.parentNode) {
                if (target.matches(delegateSelector)) {
                    handler.call(target, e);
                    break;
                }
            }
        };

        outcome.realHandler = handler;
    }

    return outcome;
};

const createEmptyEventStructure = function (withNamespacedEvents) {
    let outcome = {
        el: [], //no-namespaced eventListeners
        del: {} //delegate eventListeners
    };

    if (withNamespacedEvents) {
        outcome.nel = {}; //namespaced eventListeners
    }

    return outcome;
};



/***/ }),

/***/ "./src/on_off.plugin.js":
/*!******************************!*\
  !*** ./src/on_off.plugin.js ***!
  \******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _on_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./on.module */ "./src/on.module.js");
/* harmony import */ var _off_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./off.module */ "./src/off.module.js");
;


(function () {

    //We assign onFn to document, Element and NodeList
    document.on = _on_module__WEBPACK_IMPORTED_MODULE_0__.on;
    Element.prototype.on = _on_module__WEBPACK_IMPORTED_MODULE_0__.on;
    HTMLCollection.prototype.on = _on_module__WEBPACK_IMPORTED_MODULE_0__.on;
    NodeList.prototype.on = _on_module__WEBPACK_IMPORTED_MODULE_0__.on;

    //We assign offFn to document, Element and NodeList
    document.off = _off_module__WEBPACK_IMPORTED_MODULE_1__.off;
    Element.prototype.off = _off_module__WEBPACK_IMPORTED_MODULE_1__.off;
    HTMLCollection.prototype.off = _off_module__WEBPACK_IMPORTED_MODULE_1__.off;
    NodeList.prototype.off = _off_module__WEBPACK_IMPORTED_MODULE_1__.off;

})();



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/on_off.plugin.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,